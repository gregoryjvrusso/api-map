{"version":3,"sources":["common/GlobalStyles.js","components/elements/Button.js","components/elements/InputCEP.js","components/elements/Label.js","components/modules/ContainerHeader.js","components/elements/GoogleMaps.js","components/modules/ContainerMaps.js","components/helpers/geocode.js","common/theme.js","views/App.js","serviceWorker.js","index.js"],"names":["GlobalStyles","createGlobalStyle","primary","css","p","theme","colors","backgrounds","blue","Button","styled","button","ifProp","width","Input","InputMask","InputCEP","props","mask","maskChar","warning","texts","Label","label","fontSize","space","ContainerHeaderElements","div","gray","TitleHeader","MessageError","ContainerHeader","setData","useState","cep","setCep","message","setMessage","validatorCep","RegExp","test","cepCheck","replace","url","a","async","axios","result","data","erro","console","log","fetchData","onSubmit","e","preventDefault","htmlFor","name","value","onChange","target","id","type","placeholder","GoogleApiWrapper","apiKey","latMap","lngMap","google","window","zoom","style","height","position","initialCenter","lat","lng","center","Container","HeaderContainer","CloseContainer","Close","grayDark","ContainerTitle","Title","Text","ContainerMaps","setLat","setLng","useEffect","Geocode","setApiKey","fromAddress","then","response","results","geometry","location","error","geoCodeGenerator","logradouro","onClick","bairro","localidade","uf","color","breakpoints","fontFamily","App","Fragment","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.0c74188c.chunk.js","sourcesContent":["import { createGlobalStyle } from 'styled-components'\n\nexport const GlobalStyles = createGlobalStyle`\n  html, body {\n    margin: 0;\n    width: 100%;\n  }\n\n  * {\n    font-family: 'Arial', sans-serif;\n    outline: none;\n    user-select: none;\n    -webkit-tap-highlight-color: transparent;\n  }\n`\n","import styled, { css } from 'styled-components'\nimport { ifProp } from 'styled-tools'\nimport { width } from 'styled-system'\n\nconst primary = css`\n  background-color: ${p => p.theme.colors.backgrounds.primary.blue};\n  border: 0px;\n`\n\nconst Button = styled.button`\n  font-size: 14px;\n  margin: 4px;\n  padding: 8px 14px;\n  border: 2px solid;\n  border-radius: 3px;\n  font-weight: bold;\n  color: #FFFFFF;\n  ${ifProp('primary', primary)}\n  ${width}\n`\n\nexport default Button\n","import React from 'react'\nimport styled, { css } from 'styled-components'\nimport InputMask from 'react-input-mask';\nimport { theme } from 'styled-tools'\nimport { width } from 'styled-system'\n\nconst Input = styled(InputMask)`\n  padding: 5px;\n  ${width}\n  margin: 8px 0px;\n  box-sizing: border-box; \n  color: ${theme('color')};\n`\n\nconst InputCEP = (props) => {\n  return <Input {...props}  mask=\"99999-999\" maskChar=\"\" />\n}\n\nexport default InputCEP","import styled, { css } from 'styled-components'\nimport { theme, ifProp } from 'styled-tools'\nimport { fontSize, space } from 'styled-system'\n\nconst warning = css`\n  color: ${p => p.theme.colors.texts.warning};\n`\n\nconst Label = styled.label`\n  padding: 8px 8px;\n  margin: 2px 10px;\n  color: ${theme('color', 'yellow')};\n  ${ifProp('warning', warning)}\n  ${fontSize}\n  ${space}\n`\n\nexport default Label\n","import React, { useState, useEffect } from 'react'\nimport axios from 'axios'\nimport styled from 'styled-components'\nimport Button from '../elements/Button'\nimport InputCEP from '../elements/InputCEP'\nimport Label from '../elements/Label'\n\nconst ContainerHeaderElements = styled.div`\n  background-color: ${p => p.theme.colors.backgrounds.primary.gray};\n  display: flex;\n  flex-direction: column;\n  padding: 0.5em;\n`\nconst TitleHeader = styled.p`\n  font-weight: bold;\n`\nconst MessageError = styled.p`\n  color: red;\n  margin: 0;\n`\nconst ContainerHeader = ({ setData }) => {\n  const [cep, setCep] = useState('')\n  const [message, setMessage] = useState(false)\n  const fetchData = async (url) => {\n    try {\n      const result = await axios(url)\n      if (result.data.erro) {\n        setData('')\n        setMessage(true)\n      } else {\n        setData(result.data)\n        setMessage(false)\n      }\n    } catch (error) {\n      console.log(error)\n    }\n  }\n\n  const validatorCep = (cep) => {\n    const regex = RegExp(/^\\d{5}-\\d{3}$/)\n    if (regex.test(cep)) {\n      let cepCheck = cep.replace('-', '')\n      fetchData(`https://viacep.com.br/ws/${cepCheck}/json/`)\n    } else {\n      setMessage(true)\n      setData('')\n    }\n  }\n  return (\n    <ContainerHeaderElements>\n      <TitleHeader>Consultar</TitleHeader>\n      {message && <MessageError>Cep inv√°lido</MessageError>}\n      <form onSubmit={e => {\n        e.preventDefault()\n        validatorCep(cep)\n      }}>\n        <Label htmlFor='cep'>\n          CEP\n        </Label>\n        <InputCEP\n          width={['70%', '15em', '15em']}\n          name='cep'\n          value={cep}\n          onChange={(e) => {\n            setMessage(false)\n            setCep(e.target.value)\n          }}\n          id='cep'\n          type='text'\n          placeholder='02250-250'\n        />\n        <Button width={['95%', '8em', '8em']} type='submit' primary>\n          Buscar\n        </Button>\n      </form>\n    </ContainerHeaderElements>\n  )\n}\n\nexport default ContainerHeader","import React from 'react'\nimport { Map, Marker, GoogleApiWrapper } from 'google-maps-react'\n\nconst GoogleMaps = ({ latMap, lngMap }) => {\n    return (\n        <Map\n            google={window.google}\n            zoom={18}\n            style={{width: '95%', height: '50%', position: 'relative'}}\n            initialCenter={{ lat: latMap, lng: lngMap }}\n            center={{ lat: latMap, lng: lngMap }}\n        >\n            <Marker\n                name={'SOMA'}\n                position={{ lat: latMap, lng: lngMap }} />\n        </Map>\n    )\n}\n\nexport default GoogleApiWrapper({\n    apiKey: 'AIzaSyAtxEFG6FZcvaVN-Ng6IE3_zUNHkhNsBWU'\n})(GoogleMaps)","import React, { useState, useEffect } from 'react'\nimport GoogleMaps from '../elements/GoogleMaps'\nimport { geoCodeGenerator } from '../helpers/geocode'\nimport styled from 'styled-components'\n\nconst Container = styled.div`\n  margin-top: 1em;\n  max-height: 50%;\n`\nconst HeaderContainer = styled.div`\n  display: flex;\n`\nconst CloseContainer = styled.div`\n  min-width: 20%;\n`\nconst Close = styled.p`\n  font-size: 1.5em;\n  font-weight: bold;\n  text-align: right;\n  color: ${p => p.theme.colors.backgrounds.primary.grayDark};\n  margin-top: 0;\n  cursor: pointer;\n`\nconst ContainerTitle = styled.div`\n  min-width: 80%;\n`\nconst Title = styled.p`\n  font-size: 2em;\n  font-weight: bold;\n  margin: 0;\n`\nconst Text = styled.p`\n  font-size: 1em;\n  margin: 0em 0.5em;\n`\nconst ContainerMaps = ({ data, setData }) => {\n  const [latMap, setLat] = useState('')\n  const [lngMap, setLng] = useState('')\n  useEffect(() => {\n    geoCodeGenerator(data.cep, { setLat }, { setLng })\n  }, [data])\n\n  const closeMap = () => {\n    setData('')\n  }\n\n  return (\n    <Container>\n      <HeaderContainer>\n        <ContainerTitle>\n          <Title>{data.logradouro}</Title>\n        </ContainerTitle>\n        <CloseContainer>\n          <Close onClick={closeMap}>\n            X\n          </Close>\n        </CloseContainer>\n      </HeaderContainer>\n      <Text>{data.bairro}</Text>\n      <Text>{`${data.localidade}-${data.uf}`}</Text>\n      <Text>{data.cep}</Text>\n      {lngMap !== '' && latMap !== '' &&\n        <GoogleMaps\n          latMap={latMap}\n          lngMap={lngMap}\n        />}\n    </Container>\n  )\n}\n\nexport default ContainerMaps","import Geocode from 'react-geocode'\n\nexport const geoCodeGenerator = (cep, { setLat }, { setLng }) => {\n    Geocode.setApiKey('AIzaSyAtxEFG6FZcvaVN-Ng6IE3_zUNHkhNsBWU');\n    Geocode.fromAddress(cep.replace('-', '')).then(\n        response => {\n            const { lat, lng } = response.results[0].geometry.location\n            setLng(lng)\n            setLat(lat)\n        },\n        error => {\n            console.error(error);\n        }\n    )\n}\n","const breakpoints = ['40em', '52em', '64em', '80em']\nconst space = [0, 4, 8, 16, 32, 64, 128, 256, 512]\nconst fontFamily = 'Roboto, Arial, Helvetica, sans-serif'\n\nexport default {\n  color: '#000000',\n  breakpoints,\n  space,\n  fontFamily,\n  colors: {\n    texts: {\n      primary: '#00306e'\n    },\n    backgrounds: {\n      primary: {\n        gray: '#e5e5e5',\n        grayDark: '#7d7d7d',\n        blue: '#4eb0de'\n      }\n    }\n  }\n}","import React, { useState } from 'react'\nimport { ThemeProvider } from 'styled-components'\nimport { GlobalStyles } from '../common/GlobalStyles'\nimport ContainerHeader from '../components/modules/ContainerHeader'\nimport ContainerMaps from '../components/modules/ContainerMaps'\n\nimport theme from '../common/theme'\n\nconst App = () => {\n  const [data, setData] = useState('')\n  return (\n    <ThemeProvider theme={theme}>\n      <GlobalStyles />\n      <React.Fragment>\n          <ContainerHeader setData={setData} />\n          {data !== '' && <ContainerMaps data={data} setData={setData} />}\n      </React.Fragment>\n    </ThemeProvider>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './views/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}